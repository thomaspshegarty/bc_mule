<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
    <spring:beans>
        <spring:import resource="classpath:player-impl.xml"/>
        <spring:import resource="classpath:global.xml"/>
        <spring:import resource="classpath:lcstracker-api.xml"/>
        <spring:import resource="classpath:team-impl.xml"/>
    </spring:beans>
    <munit:test name="players_getPlayerByIgn_subFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock database call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Retrieve Player with given ign']"/>
            </mock:with-attributes>
            <mock:then-return payload="{&quot;ign&quot;:&quot;zven&quot;,&quot;team&quot;:&quot;tsm&quot;,&quot;role&quot;:&quot;adc&quot;}">
                <mock:inbound-properties>
                    <mock:inbound-property key="ign" value="zven"/>
                </mock:inbound-properties>
            </mock:then-return>
        </mock:when>
		<munit:set payload="#['']" doc:name="Set uri params">
        <munit:inbound-properties>
            <munit:inbound-property key="http.uri.params" value="#[['ign': 'zven']]"/>
        </munit:inbound-properties>
 		</munit:set>
        <flow-ref name="players_getPlayerByIgn_subFlow" doc:name="Mock a call to get player by IGN"/>
        <munit:assert-on-equals message="The output failed to match expected." expectedValue="{&quot;ign&quot;:&quot;zven&quot;,&quot;team&quot;:&quot;tsm&quot;,&quot;role&quot;:&quot;adc&quot;}" actualValue="#[payload]" doc:name="Check that the name we got is Zven"/>
    </munit:test>
    <munit:test name="players_getPlayersByRole_subFlowTest" description="test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock database call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('players_getPlayersByRole_subFlow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="[{&quot;ign&quot;:&quot;zven&quot;,&quot;team&quot;:&quot;tsm&quot;,&quot;role&quot;:&quot;adc&quot;}]"/>
        </mock:when>
        <munit:set payload="#['']" doc:name="Set uri params">
            <munit:inbound-properties>
                <munit:inbound-property key="http.uri.params" value="#[['ign': 'zven']]"/>
                <munit:inbound-property key="http.query.params" value="#[['role':'adc']]"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="players_getPlayersByRole_subFlow" doc:name="Flow Reference"/>
        <munit:assert-on-equals message="Output was not the mocked db output." expectedValue="[{&quot;ign&quot;:&quot;zven&quot;,&quot;team&quot;:&quot;tsm&quot;,&quot;role&quot;:&quot;adc&quot;}]" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
</mule>
